/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 134.0, "minX": 0.0, "maxY": 54316.0, "series": [{"data": [[0.0, 134.0], [0.1, 152.0], [0.2, 153.0], [0.3, 153.0], [0.4, 153.0], [0.5, 154.0], [0.6, 154.0], [0.7, 154.0], [0.8, 154.0], [0.9, 154.0], [1.0, 155.0], [1.1, 155.0], [1.2, 155.0], [1.3, 155.0], [1.4, 155.0], [1.5, 155.0], [1.6, 155.0], [1.7, 155.0], [1.8, 156.0], [1.9, 156.0], [2.0, 156.0], [2.1, 156.0], [2.2, 156.0], [2.3, 156.0], [2.4, 156.0], [2.5, 156.0], [2.6, 156.0], [2.7, 156.0], [2.8, 156.0], [2.9, 156.0], [3.0, 156.0], [3.1, 157.0], [3.2, 157.0], [3.3, 157.0], [3.4, 157.0], [3.5, 157.0], [3.6, 157.0], [3.7, 157.0], [3.8, 157.0], [3.9, 157.0], [4.0, 157.0], [4.1, 157.0], [4.2, 157.0], [4.3, 157.0], [4.4, 157.0], [4.5, 157.0], [4.6, 157.0], [4.7, 157.0], [4.8, 158.0], [4.9, 158.0], [5.0, 158.0], [5.1, 158.0], [5.2, 158.0], [5.3, 158.0], [5.4, 158.0], [5.5, 158.0], [5.6, 158.0], [5.7, 158.0], [5.8, 158.0], [5.9, 158.0], [6.0, 158.0], [6.1, 158.0], [6.2, 158.0], [6.3, 158.0], [6.4, 158.0], [6.5, 158.0], [6.6, 158.0], [6.7, 158.0], [6.8, 158.0], [6.9, 158.0], [7.0, 158.0], [7.1, 158.0], [7.2, 159.0], [7.3, 159.0], [7.4, 159.0], [7.5, 159.0], [7.6, 159.0], [7.7, 159.0], [7.8, 159.0], [7.9, 159.0], [8.0, 159.0], [8.1, 159.0], [8.2, 159.0], [8.3, 159.0], [8.4, 159.0], [8.5, 159.0], [8.6, 159.0], [8.7, 159.0], [8.8, 159.0], [8.9, 159.0], [9.0, 159.0], [9.1, 159.0], [9.2, 159.0], [9.3, 159.0], [9.4, 159.0], [9.5, 159.0], [9.6, 159.0], [9.7, 159.0], [9.8, 159.0], [9.9, 159.0], [10.0, 159.0], [10.1, 159.0], [10.2, 160.0], [10.3, 160.0], [10.4, 160.0], [10.5, 160.0], [10.6, 160.0], [10.7, 160.0], [10.8, 160.0], [10.9, 160.0], [11.0, 160.0], [11.1, 160.0], [11.2, 160.0], [11.3, 160.0], [11.4, 160.0], [11.5, 160.0], [11.6, 160.0], [11.7, 160.0], [11.8, 160.0], [11.9, 160.0], [12.0, 160.0], [12.1, 160.0], [12.2, 160.0], [12.3, 160.0], [12.4, 160.0], [12.5, 160.0], [12.6, 160.0], [12.7, 160.0], [12.8, 160.0], [12.9, 160.0], [13.0, 160.0], [13.1, 160.0], [13.2, 160.0], [13.3, 160.0], [13.4, 160.0], [13.5, 160.0], [13.6, 161.0], [13.7, 161.0], [13.8, 161.0], [13.9, 161.0], [14.0, 161.0], [14.1, 161.0], [14.2, 161.0], [14.3, 161.0], [14.4, 161.0], [14.5, 161.0], [14.6, 161.0], [14.7, 161.0], [14.8, 161.0], [14.9, 161.0], [15.0, 161.0], [15.1, 161.0], [15.2, 161.0], [15.3, 161.0], [15.4, 161.0], [15.5, 161.0], [15.6, 161.0], [15.7, 161.0], [15.8, 161.0], [15.9, 161.0], [16.0, 161.0], [16.1, 161.0], [16.2, 161.0], [16.3, 161.0], [16.4, 161.0], [16.5, 161.0], [16.6, 161.0], [16.7, 161.0], [16.8, 161.0], [16.9, 162.0], [17.0, 162.0], [17.1, 162.0], [17.2, 162.0], [17.3, 162.0], [17.4, 162.0], [17.5, 162.0], [17.6, 162.0], [17.7, 162.0], [17.8, 162.0], [17.9, 162.0], [18.0, 162.0], [18.1, 162.0], [18.2, 162.0], [18.3, 162.0], [18.4, 162.0], [18.5, 162.0], [18.6, 162.0], [18.7, 162.0], [18.8, 162.0], [18.9, 162.0], [19.0, 162.0], [19.1, 162.0], [19.2, 162.0], [19.3, 162.0], [19.4, 162.0], [19.5, 162.0], [19.6, 162.0], [19.7, 162.0], [19.8, 162.0], [19.9, 162.0], [20.0, 162.0], [20.1, 162.0], [20.2, 162.0], [20.3, 162.0], [20.4, 162.0], [20.5, 162.0], [20.6, 162.0], [20.7, 163.0], [20.8, 163.0], [20.9, 163.0], [21.0, 163.0], [21.1, 163.0], [21.2, 163.0], [21.3, 163.0], [21.4, 163.0], [21.5, 163.0], [21.6, 163.0], [21.7, 163.0], [21.8, 163.0], [21.9, 163.0], [22.0, 163.0], [22.1, 163.0], [22.2, 163.0], [22.3, 163.0], [22.4, 163.0], [22.5, 163.0], [22.6, 163.0], [22.7, 163.0], [22.8, 163.0], [22.9, 163.0], [23.0, 163.0], [23.1, 163.0], [23.2, 163.0], [23.3, 163.0], [23.4, 163.0], [23.5, 163.0], [23.6, 163.0], [23.7, 163.0], [23.8, 163.0], [23.9, 163.0], [24.0, 163.0], [24.1, 163.0], [24.2, 163.0], [24.3, 163.0], [24.4, 164.0], [24.5, 164.0], [24.6, 164.0], [24.7, 164.0], [24.8, 164.0], [24.9, 164.0], [25.0, 164.0], [25.1, 164.0], [25.2, 164.0], [25.3, 164.0], [25.4, 164.0], [25.5, 164.0], [25.6, 164.0], [25.7, 164.0], [25.8, 164.0], [25.9, 164.0], [26.0, 164.0], [26.1, 164.0], [26.2, 164.0], [26.3, 164.0], [26.4, 164.0], [26.5, 164.0], [26.6, 164.0], [26.7, 164.0], [26.8, 164.0], [26.9, 164.0], [27.0, 164.0], [27.1, 164.0], [27.2, 164.0], [27.3, 164.0], [27.4, 164.0], [27.5, 164.0], [27.6, 164.0], [27.7, 164.0], [27.8, 164.0], [27.9, 164.0], [28.0, 164.0], [28.1, 164.0], [28.2, 165.0], [28.3, 165.0], [28.4, 165.0], [28.5, 165.0], [28.6, 165.0], [28.7, 165.0], [28.8, 165.0], [28.9, 165.0], [29.0, 165.0], [29.1, 165.0], [29.2, 165.0], [29.3, 165.0], [29.4, 165.0], [29.5, 165.0], [29.6, 165.0], [29.7, 165.0], [29.8, 165.0], [29.9, 165.0], [30.0, 165.0], [30.1, 165.0], [30.2, 165.0], [30.3, 165.0], [30.4, 165.0], [30.5, 165.0], [30.6, 165.0], [30.7, 165.0], [30.8, 165.0], [30.9, 165.0], [31.0, 165.0], [31.1, 165.0], [31.2, 165.0], [31.3, 165.0], [31.4, 165.0], [31.5, 165.0], [31.6, 165.0], [31.7, 166.0], [31.8, 166.0], [31.9, 166.0], [32.0, 166.0], [32.1, 166.0], [32.2, 166.0], [32.3, 166.0], [32.4, 166.0], [32.5, 166.0], [32.6, 166.0], [32.7, 166.0], [32.8, 166.0], [32.9, 166.0], [33.0, 166.0], [33.1, 166.0], [33.2, 166.0], [33.3, 166.0], [33.4, 166.0], [33.5, 166.0], [33.6, 166.0], [33.7, 166.0], [33.8, 166.0], [33.9, 166.0], [34.0, 166.0], [34.1, 166.0], [34.2, 166.0], [34.3, 166.0], [34.4, 166.0], [34.5, 166.0], [34.6, 166.0], [34.7, 166.0], [34.8, 166.0], [34.9, 166.0], [35.0, 167.0], [35.1, 167.0], [35.2, 167.0], [35.3, 167.0], [35.4, 167.0], [35.5, 167.0], [35.6, 167.0], [35.7, 167.0], [35.8, 167.0], [35.9, 167.0], [36.0, 167.0], [36.1, 167.0], [36.2, 167.0], [36.3, 167.0], [36.4, 167.0], [36.5, 167.0], [36.6, 167.0], [36.7, 167.0], [36.8, 167.0], [36.9, 167.0], [37.0, 167.0], [37.1, 167.0], [37.2, 167.0], [37.3, 167.0], [37.4, 167.0], [37.5, 167.0], [37.6, 167.0], [37.7, 167.0], [37.8, 167.0], [37.9, 168.0], [38.0, 168.0], [38.1, 168.0], [38.2, 168.0], [38.3, 168.0], [38.4, 168.0], [38.5, 168.0], [38.6, 168.0], [38.7, 168.0], [38.8, 168.0], [38.9, 168.0], [39.0, 168.0], [39.1, 168.0], [39.2, 168.0], [39.3, 168.0], [39.4, 168.0], [39.5, 168.0], [39.6, 168.0], [39.7, 168.0], [39.8, 168.0], [39.9, 168.0], [40.0, 168.0], [40.1, 168.0], [40.2, 168.0], [40.3, 168.0], [40.4, 169.0], [40.5, 169.0], [40.6, 169.0], [40.7, 169.0], [40.8, 169.0], [40.9, 169.0], [41.0, 169.0], [41.1, 169.0], [41.2, 169.0], [41.3, 169.0], [41.4, 169.0], [41.5, 169.0], [41.6, 169.0], [41.7, 169.0], [41.8, 169.0], [41.9, 169.0], [42.0, 169.0], [42.1, 169.0], [42.2, 169.0], [42.3, 169.0], [42.4, 169.0], [42.5, 169.0], [42.6, 169.0], [42.7, 169.0], [42.8, 169.0], [42.9, 170.0], [43.0, 170.0], [43.1, 170.0], [43.2, 170.0], [43.3, 170.0], [43.4, 170.0], [43.5, 170.0], [43.6, 170.0], [43.7, 170.0], [43.8, 170.0], [43.9, 170.0], [44.0, 170.0], [44.1, 170.0], [44.2, 170.0], [44.3, 170.0], [44.4, 170.0], [44.5, 170.0], [44.6, 170.0], [44.7, 170.0], [44.8, 170.0], [44.9, 170.0], [45.0, 171.0], [45.1, 171.0], [45.2, 171.0], [45.3, 171.0], [45.4, 171.0], [45.5, 171.0], [45.6, 171.0], [45.7, 171.0], [45.8, 171.0], [45.9, 171.0], [46.0, 171.0], [46.1, 171.0], [46.2, 171.0], [46.3, 171.0], [46.4, 171.0], [46.5, 171.0], [46.6, 171.0], [46.7, 171.0], [46.8, 171.0], [46.9, 171.0], [47.0, 172.0], [47.1, 172.0], [47.2, 172.0], [47.3, 172.0], [47.4, 172.0], [47.5, 172.0], [47.6, 172.0], [47.7, 172.0], [47.8, 172.0], [47.9, 172.0], [48.0, 172.0], [48.1, 172.0], [48.2, 172.0], [48.3, 172.0], [48.4, 172.0], [48.5, 173.0], [48.6, 173.0], [48.7, 173.0], [48.8, 173.0], [48.9, 173.0], [49.0, 173.0], [49.1, 173.0], [49.2, 173.0], [49.3, 173.0], [49.4, 173.0], [49.5, 173.0], [49.6, 173.0], [49.7, 173.0], [49.8, 173.0], [49.9, 173.0], [50.0, 173.0], [50.1, 173.0], [50.2, 174.0], [50.3, 174.0], [50.4, 174.0], [50.5, 174.0], [50.6, 174.0], [50.7, 174.0], [50.8, 174.0], [50.9, 174.0], [51.0, 174.0], [51.1, 174.0], [51.2, 174.0], [51.3, 174.0], [51.4, 174.0], [51.5, 174.0], [51.6, 174.0], [51.7, 174.0], [51.8, 175.0], [51.9, 175.0], [52.0, 175.0], [52.1, 175.0], [52.2, 175.0], [52.3, 175.0], [52.4, 175.0], [52.5, 175.0], [52.6, 175.0], [52.7, 175.0], [52.8, 175.0], [52.9, 175.0], [53.0, 176.0], [53.1, 176.0], [53.2, 176.0], [53.3, 176.0], [53.4, 176.0], [53.5, 176.0], [53.6, 176.0], [53.7, 176.0], [53.8, 176.0], [53.9, 176.0], [54.0, 176.0], [54.1, 176.0], [54.2, 177.0], [54.3, 177.0], [54.4, 177.0], [54.5, 177.0], [54.6, 177.0], [54.7, 177.0], [54.8, 177.0], [54.9, 177.0], [55.0, 177.0], [55.1, 177.0], [55.2, 177.0], [55.3, 177.0], [55.4, 178.0], [55.5, 178.0], [55.6, 178.0], [55.7, 178.0], [55.8, 178.0], [55.9, 178.0], [56.0, 178.0], [56.1, 178.0], [56.2, 178.0], [56.3, 178.0], [56.4, 178.0], [56.5, 179.0], [56.6, 179.0], [56.7, 179.0], [56.8, 179.0], [56.9, 179.0], [57.0, 179.0], [57.1, 179.0], [57.2, 179.0], [57.3, 180.0], [57.4, 180.0], [57.5, 180.0], [57.6, 180.0], [57.7, 180.0], [57.8, 180.0], [57.9, 180.0], [58.0, 180.0], [58.1, 181.0], [58.2, 181.0], [58.3, 181.0], [58.4, 181.0], [58.5, 181.0], [58.6, 181.0], [58.7, 181.0], [58.8, 182.0], [58.9, 182.0], [59.0, 182.0], [59.1, 182.0], [59.2, 182.0], [59.3, 182.0], [59.4, 183.0], [59.5, 183.0], [59.6, 183.0], [59.7, 183.0], [59.8, 183.0], [59.9, 183.0], [60.0, 184.0], [60.1, 184.0], [60.2, 184.0], [60.3, 184.0], [60.4, 184.0], [60.5, 184.0], [60.6, 185.0], [60.7, 185.0], [60.8, 185.0], [60.9, 185.0], [61.0, 186.0], [61.1, 186.0], [61.2, 186.0], [61.3, 186.0], [61.4, 186.0], [61.5, 187.0], [61.6, 187.0], [61.7, 187.0], [61.8, 187.0], [61.9, 188.0], [62.0, 188.0], [62.1, 188.0], [62.2, 188.0], [62.3, 189.0], [62.4, 189.0], [62.5, 189.0], [62.6, 190.0], [62.7, 190.0], [62.8, 190.0], [62.9, 191.0], [63.0, 191.0], [63.1, 191.0], [63.2, 192.0], [63.3, 192.0], [63.4, 193.0], [63.5, 193.0], [63.6, 194.0], [63.7, 194.0], [63.8, 195.0], [63.9, 196.0], [64.0, 197.0], [64.1, 198.0], [64.2, 199.0], [64.3, 200.0], [64.4, 201.0], [64.5, 203.0], [64.6, 205.0], [64.7, 207.0], [64.8, 213.0], [64.9, 225.0], [65.0, 239.0], [65.1, 248.0], [65.2, 256.0], [65.3, 267.0], [65.4, 277.0], [65.5, 295.0], [65.6, 326.0], [65.7, 350.0], [65.8, 386.0], [65.9, 452.0], [66.0, 644.0], [66.1, 1148.0], [66.2, 1153.0], [66.3, 1159.0], [66.4, 1162.0], [66.5, 1165.0], [66.6, 1176.0], [66.7, 2112.0], [66.8, 2572.0], [66.9, 3079.0], [67.0, 3859.0], [67.1, 4517.0], [67.2, 5689.0], [67.3, 6829.0], [67.4, 7472.0], [67.5, 7925.0], [67.6, 8267.0], [67.7, 9078.0], [67.8, 9801.0], [67.9, 10956.0], [68.0, 11603.0], [68.1, 12231.0], [68.2, 12906.0], [68.3, 13525.0], [68.4, 14347.0], [68.5, 15021.0], [68.6, 15415.0], [68.7, 15916.0], [68.8, 16245.0], [68.9, 17264.0], [69.0, 18180.0], [69.1, 19178.0], [69.2, 20140.0], [69.3, 20441.0], [69.4, 20867.0], [69.5, 21262.0], [69.6, 22554.0], [69.7, 23686.0], [69.8, 24183.0], [69.9, 24256.0], [70.0, 24267.0], [70.1, 24280.0], [70.2, 24301.0], [70.3, 24411.0], [70.4, 25175.0], [70.5, 25186.0], [70.6, 25256.0], [70.7, 25267.0], [70.8, 25274.0], [70.9, 25282.0], [71.0, 25288.0], [71.1, 25293.0], [71.2, 25299.0], [71.3, 25320.0], [71.4, 25339.0], [71.5, 25706.0], [71.6, 25815.0], [71.7, 26031.0], [71.8, 26191.0], [71.9, 26267.0], [72.0, 26278.0], [72.1, 26520.0], [72.2, 27825.0], [72.3, 28589.0], [72.4, 29097.0], [72.5, 29991.0], [72.6, 30133.0], [72.7, 30135.0], [72.8, 30136.0], [72.9, 30137.0], [73.0, 30138.0], [73.1, 30138.0], [73.2, 30138.0], [73.3, 30139.0], [73.4, 30139.0], [73.5, 30140.0], [73.6, 30140.0], [73.7, 30140.0], [73.8, 30141.0], [73.9, 30141.0], [74.0, 30142.0], [74.1, 30142.0], [74.2, 30142.0], [74.3, 30143.0], [74.4, 30143.0], [74.5, 30144.0], [74.6, 30144.0], [74.7, 30144.0], [74.8, 30145.0], [74.9, 30145.0], [75.0, 30146.0], [75.1, 30147.0], [75.2, 30147.0], [75.3, 30147.0], [75.4, 30148.0], [75.5, 30149.0], [75.6, 30149.0], [75.7, 30150.0], [75.8, 30151.0], [75.9, 30152.0], [76.0, 30152.0], [76.1, 30153.0], [76.2, 30154.0], [76.3, 30155.0], [76.4, 30157.0], [76.5, 30157.0], [76.6, 30158.0], [76.7, 30159.0], [76.8, 30160.0], [76.9, 30160.0], [77.0, 30161.0], [77.1, 30161.0], [77.2, 30162.0], [77.3, 30162.0], [77.4, 30163.0], [77.5, 30163.0], [77.6, 30163.0], [77.7, 30164.0], [77.8, 30164.0], [77.9, 30164.0], [78.0, 30165.0], [78.1, 30165.0], [78.2, 30166.0], [78.3, 30166.0], [78.4, 30166.0], [78.5, 30167.0], [78.6, 30167.0], [78.7, 30167.0], [78.8, 30167.0], [78.9, 30168.0], [79.0, 30168.0], [79.1, 30168.0], [79.2, 30168.0], [79.3, 30169.0], [79.4, 30169.0], [79.5, 30169.0], [79.6, 30170.0], [79.7, 30170.0], [79.8, 30170.0], [79.9, 30171.0], [80.0, 30171.0], [80.1, 30171.0], [80.2, 30172.0], [80.3, 30172.0], [80.4, 30172.0], [80.5, 30173.0], [80.6, 30173.0], [80.7, 30174.0], [80.8, 30174.0], [80.9, 30174.0], [81.0, 30175.0], [81.1, 30175.0], [81.2, 30176.0], [81.3, 30176.0], [81.4, 30177.0], [81.5, 30177.0], [81.6, 30178.0], [81.7, 30178.0], [81.8, 30179.0], [81.9, 30180.0], [82.0, 30180.0], [82.1, 30181.0], [82.2, 30182.0], [82.3, 30184.0], [82.4, 30184.0], [82.5, 30185.0], [82.6, 30186.0], [82.7, 30187.0], [82.8, 30187.0], [82.9, 30189.0], [83.0, 30190.0], [83.1, 30191.0], [83.2, 30192.0], [83.3, 30193.0], [83.4, 30194.0], [83.5, 30194.0], [83.6, 30195.0], [83.7, 30196.0], [83.8, 30197.0], [83.9, 30197.0], [84.0, 30198.0], [84.1, 30199.0], [84.2, 30200.0], [84.3, 30201.0], [84.4, 30202.0], [84.5, 30203.0], [84.6, 30204.0], [84.7, 30204.0], [84.8, 30205.0], [84.9, 30206.0], [85.0, 30207.0], [85.1, 30208.0], [85.2, 30209.0], [85.3, 30210.0], [85.4, 30212.0], [85.5, 30213.0], [85.6, 30215.0], [85.7, 30217.0], [85.8, 30218.0], [85.9, 30220.0], [86.0, 30221.0], [86.1, 30223.0], [86.2, 30224.0], [86.3, 30225.0], [86.4, 30226.0], [86.5, 30227.0], [86.6, 30228.0], [86.7, 30229.0], [86.8, 30230.0], [86.9, 30231.0], [87.0, 30232.0], [87.1, 30233.0], [87.2, 30234.0], [87.3, 30236.0], [87.4, 30237.0], [87.5, 30238.0], [87.6, 30239.0], [87.7, 30240.0], [87.8, 30241.0], [87.9, 30242.0], [88.0, 30243.0], [88.1, 30244.0], [88.2, 30244.0], [88.3, 30245.0], [88.4, 30246.0], [88.5, 30247.0], [88.6, 30248.0], [88.7, 30248.0], [88.8, 30249.0], [88.9, 30250.0], [89.0, 30250.0], [89.1, 30251.0], [89.2, 30252.0], [89.3, 30253.0], [89.4, 30254.0], [89.5, 30255.0], [89.6, 30256.0], [89.7, 30256.0], [89.8, 30257.0], [89.9, 30258.0], [90.0, 30259.0], [90.1, 30261.0], [90.2, 30261.0], [90.3, 30262.0], [90.4, 30264.0], [90.5, 30265.0], [90.6, 30267.0], [90.7, 30269.0], [90.8, 30271.0], [90.9, 30277.0], [91.0, 30281.0], [91.1, 30284.0], [91.2, 30286.0], [91.3, 30289.0], [91.4, 30290.0], [91.5, 30292.0], [91.6, 30293.0], [91.7, 30295.0], [91.8, 30296.0], [91.9, 30298.0], [92.0, 30298.0], [92.1, 30300.0], [92.2, 30301.0], [92.3, 30302.0], [92.4, 30303.0], [92.5, 30305.0], [92.6, 30306.0], [92.7, 30308.0], [92.8, 30309.0], [92.9, 30311.0], [93.0, 30313.0], [93.1, 30315.0], [93.2, 30316.0], [93.3, 30318.0], [93.4, 30321.0], [93.5, 30324.0], [93.6, 30327.0], [93.7, 30329.0], [93.8, 30333.0], [93.9, 30337.0], [94.0, 30341.0], [94.1, 30344.0], [94.2, 30347.0], [94.3, 30350.0], [94.4, 30354.0], [94.5, 30357.0], [94.6, 30361.0], [94.7, 30365.0], [94.8, 30368.0], [94.9, 30370.0], [95.0, 30375.0], [95.1, 30378.0], [95.2, 30383.0], [95.3, 30386.0], [95.4, 30390.0], [95.5, 30394.0], [95.6, 30397.0], [95.7, 30401.0], [95.8, 30404.0], [95.9, 30407.0], [96.0, 30413.0], [96.1, 30426.0], [96.2, 30469.0], [96.3, 30554.0], [96.4, 30793.0], [96.5, 32051.0], [96.6, 34288.0], [96.7, 39255.0], [96.8, 39287.0], [96.9, 40170.0], [97.0, 40200.0], [97.1, 40241.0], [97.2, 40249.0], [97.3, 40258.0], [97.4, 40278.0], [97.5, 40286.0], [97.6, 40293.0], [97.7, 40298.0], [97.8, 40301.0], [97.9, 40319.0], [98.0, 42202.0], [98.1, 42221.0], [98.2, 42592.0], [98.3, 46222.0], [98.4, 46708.0], [98.5, 48218.0], [98.6, 52160.0], [98.7, 52168.0], [98.8, 52177.0], [98.9, 54169.0], [99.0, 54179.0], [99.1, 54187.0], [99.2, 54190.0], [99.3, 54193.0], [99.4, 54197.0], [99.5, 54204.0], [99.6, 54210.0], [99.7, 54214.0], [99.8, 54219.0], [99.9, 54223.0], [100.0, 54316.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 13497.0, "series": [{"data": [[100.0, 13497.0], [34100.0, 2.0], [34900.0, 1.0], [36100.0, 2.0], [39300.0, 5.0], [40100.0, 24.0], [40500.0, 1.0], [42100.0, 14.0], [42500.0, 1.0], [44500.0, 1.0], [44100.0, 3.0], [46100.0, 7.0], [47700.0, 1.0], [48900.0, 4.0], [48100.0, 5.0], [48500.0, 1.0], [200.0, 260.0], [52100.0, 53.0], [53700.0, 1.0], [54100.0, 121.0], [300.0, 66.0], [400.0, 24.0], [500.0, 11.0], [600.0, 2.0], [700.0, 1.0], [800.0, 1.0], [900.0, 1.0], [1100.0, 130.0], [1200.0, 3.0], [1300.0, 1.0], [1600.0, 3.0], [1700.0, 1.0], [1800.0, 1.0], [1900.0, 1.0], [2000.0, 3.0], [2100.0, 12.0], [2200.0, 2.0], [2300.0, 3.0], [2400.0, 3.0], [2500.0, 3.0], [2600.0, 5.0], [2800.0, 3.0], [2700.0, 2.0], [2900.0, 4.0], [3000.0, 6.0], [3100.0, 6.0], [3300.0, 2.0], [3200.0, 3.0], [3400.0, 2.0], [3700.0, 4.0], [3600.0, 3.0], [3800.0, 2.0], [4000.0, 5.0], [4200.0, 5.0], [4300.0, 2.0], [4100.0, 4.0], [4500.0, 4.0], [4400.0, 2.0], [4700.0, 2.0], [4800.0, 2.0], [4900.0, 2.0], [5100.0, 2.0], [5300.0, 1.0], [5200.0, 3.0], [5600.0, 3.0], [5400.0, 2.0], [5500.0, 2.0], [5800.0, 2.0], [5900.0, 2.0], [6000.0, 1.0], [6100.0, 1.0], [6300.0, 4.0], [6200.0, 2.0], [6600.0, 1.0], [6400.0, 2.0], [6500.0, 1.0], [6900.0, 1.0], [6700.0, 3.0], [6800.0, 4.0], [7100.0, 5.0], [7000.0, 4.0], [7200.0, 3.0], [7300.0, 3.0], [7400.0, 3.0], [7500.0, 5.0], [7600.0, 2.0], [7800.0, 10.0], [7900.0, 7.0], [7700.0, 2.0], [8000.0, 5.0], [8100.0, 7.0], [8500.0, 3.0], [8200.0, 7.0], [8600.0, 3.0], [8700.0, 3.0], [8300.0, 1.0], [8900.0, 2.0], [9000.0, 3.0], [9100.0, 4.0], [9200.0, 6.0], [8800.0, 3.0], [9500.0, 3.0], [9700.0, 2.0], [9600.0, 1.0], [9300.0, 4.0], [9800.0, 2.0], [10200.0, 4.0], [10000.0, 1.0], [10100.0, 3.0], [9900.0, 1.0], [10500.0, 2.0], [10400.0, 1.0], [10700.0, 1.0], [10300.0, 1.0], [11100.0, 4.0], [10900.0, 4.0], [11200.0, 6.0], [10800.0, 2.0], [11400.0, 5.0], [11700.0, 1.0], [11300.0, 5.0], [11600.0, 3.0], [11800.0, 2.0], [12200.0, 5.0], [12000.0, 8.0], [11900.0, 5.0], [12100.0, 1.0], [12600.0, 2.0], [12700.0, 6.0], [12400.0, 1.0], [12500.0, 4.0], [12300.0, 2.0], [12800.0, 2.0], [13100.0, 7.0], [13000.0, 6.0], [12900.0, 2.0], [13300.0, 1.0], [13200.0, 4.0], [13600.0, 5.0], [13800.0, 3.0], [13400.0, 1.0], [13500.0, 2.0], [13900.0, 6.0], [14300.0, 2.0], [14000.0, 1.0], [14100.0, 2.0], [14200.0, 1.0], [14700.0, 5.0], [14400.0, 1.0], [14500.0, 4.0], [14800.0, 8.0], [14600.0, 1.0], [15000.0, 7.0], [15300.0, 3.0], [15100.0, 6.0], [14900.0, 1.0], [15200.0, 4.0], [15500.0, 7.0], [15400.0, 9.0], [15800.0, 3.0], [15600.0, 1.0], [16100.0, 8.0], [16000.0, 9.0], [15900.0, 5.0], [16200.0, 5.0], [17400.0, 3.0], [16400.0, 3.0], [17200.0, 7.0], [16800.0, 2.0], [17000.0, 2.0], [18200.0, 1.0], [17800.0, 1.0], [18000.0, 2.0], [17600.0, 2.0], [18400.0, 1.0], [19200.0, 3.0], [19000.0, 7.0], [18600.0, 1.0], [18800.0, 2.0], [20200.0, 11.0], [20400.0, 9.0], [20000.0, 2.0], [19800.0, 2.0], [19600.0, 2.0], [20600.0, 2.0], [21200.0, 5.0], [20800.0, 9.0], [21000.0, 9.0], [22400.0, 3.0], [21800.0, 1.0], [22200.0, 4.0], [22000.0, 1.0], [23400.0, 2.0], [22800.0, 1.0], [23200.0, 7.0], [22600.0, 1.0], [24000.0, 2.0], [24400.0, 5.0], [24200.0, 73.0], [23600.0, 1.0], [25200.0, 134.0], [25000.0, 7.0], [25400.0, 3.0], [24800.0, 2.0], [24600.0, 1.0], [25800.0, 12.0], [25600.0, 5.0], [26000.0, 6.0], [26200.0, 56.0], [26400.0, 2.0], [26600.0, 1.0], [27400.0, 1.0], [27600.0, 1.0], [27000.0, 2.0], [27200.0, 1.0], [26800.0, 2.0], [28600.0, 8.0], [28400.0, 4.0], [27800.0, 2.0], [28200.0, 3.0], [28000.0, 1.0], [28800.0, 4.0], [29000.0, 3.0], [29200.0, 2.0], [29600.0, 1.0], [29400.0, 1.0], [29800.0, 1.0], [30000.0, 1.0], [30200.0, 1667.0], [30600.0, 10.0], [30400.0, 124.0], [30800.0, 4.0], [31200.0, 1.0], [31800.0, 3.0], [32000.0, 1.0], [32400.0, 1.0], [32200.0, 2.0], [32800.0, 1.0], [34800.0, 1.0], [33200.0, 3.0], [35200.0, 1.0], [37200.0, 1.0], [39200.0, 34.0], [47200.0, 1.0], [48400.0, 1.0], [33900.0, 2.0], [33100.0, 5.0], [35100.0, 2.0], [37100.0, 2.0], [39900.0, 1.0], [39100.0, 2.0], [40300.0, 35.0], [47100.0, 1.0], [46700.0, 5.0], [46300.0, 1.0], [47900.0, 3.0], [50300.0, 1.0], [52300.0, 2.0], [54300.0, 1.0], [16700.0, 1.0], [17300.0, 3.0], [17100.0, 5.0], [16500.0, 1.0], [17500.0, 3.0], [18100.0, 4.0], [17700.0, 2.0], [18300.0, 3.0], [18900.0, 2.0], [19100.0, 1.0], [18500.0, 1.0], [19300.0, 1.0], [19900.0, 7.0], [20100.0, 4.0], [20300.0, 3.0], [19700.0, 2.0], [20900.0, 5.0], [21500.0, 3.0], [20700.0, 4.0], [20500.0, 3.0], [21100.0, 2.0], [21700.0, 2.0], [21900.0, 2.0], [22300.0, 1.0], [22500.0, 1.0], [22100.0, 2.0], [23100.0, 7.0], [22900.0, 1.0], [22700.0, 1.0], [23700.0, 2.0], [24300.0, 18.0], [23900.0, 1.0], [24100.0, 26.0], [25500.0, 4.0], [24900.0, 5.0], [24700.0, 2.0], [25300.0, 49.0], [25100.0, 38.0], [25900.0, 10.0], [25700.0, 18.0], [26100.0, 20.0], [26300.0, 1.0], [26500.0, 8.0], [27100.0, 1.0], [27500.0, 1.0], [27300.0, 1.0], [26900.0, 1.0], [28500.0, 9.0], [28300.0, 3.0], [28100.0, 2.0], [27700.0, 2.0], [27900.0, 1.0], [29300.0, 3.0], [29500.0, 5.0], [29100.0, 3.0], [28700.0, 1.0], [28900.0, 2.0], [30500.0, 14.0], [29700.0, 3.0], [30100.0, 2443.0], [30700.0, 7.0], [30300.0, 753.0], [29900.0, 2.0], [31500.0, 2.0], [31100.0, 9.0], [30900.0, 1.0], [32500.0, 1.0], [32100.0, 1.0], [34200.0, 3.0], [36200.0, 2.0], [38200.0, 3.0], [39000.0, 1.0], [40200.0, 157.0], [39800.0, 1.0], [41400.0, 1.0], [42200.0, 44.0], [44200.0, 9.0], [46600.0, 6.0], [46200.0, 13.0], [47800.0, 3.0], [49000.0, 1.0], [48200.0, 12.0], [52200.0, 2.0], [54200.0, 119.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 54300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 452.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 20548.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 452.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 20548.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.346153846153847, "minX": 1.61221428E12, "maxY": 500.0, "series": [{"data": [[1.6122144E12, 86.90449438202246], [1.61221476E12, 381.5273698264351], [1.61221446E12, 138.1935483870967], [1.61221482E12, 436.57243816254436], [1.61221452E12, 188.09455587392563], [1.61221488E12, 488.996832101373], [1.61221458E12, 237.98657718120805], [1.612215E12, 434.047736845625], [1.61221428E12, 8.346153846153847], [1.61221494E12, 500.0], [1.61221464E12, 288.0877513711152], [1.61221434E12, 38.47486033519552], [1.6122147E12, 321.84819734345314]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.612215E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 156.0, "minX": 1.0, "maxY": 41939.85714285714, "series": [{"data": [[2.0, 164.0], [3.0, 1609.0], [4.0, 1844.0], [5.0, 1511.0], [6.0, 1408.0], [7.0, 1474.4], [8.0, 1396.0], [9.0, 2613.2], [10.0, 2278.0], [11.0, 3118.6666666666665], [12.0, 1673.375], [13.0, 2839.666666666667], [14.0, 3067.6], [15.0, 896.7999999999998], [16.0, 3084.1428571428573], [17.0, 1079.4], [18.0, 3504.1250000000005], [19.0, 3011.75], [20.0, 3809.9999999999995], [21.0, 3957.0], [22.0, 5172.75], [23.0, 3256.0], [24.0, 6344.285714285714], [25.0, 6028.8], [26.0, 161.5], [27.0, 6445.285714285714], [28.0, 4756.125], [29.0, 2334.2000000000003], [30.0, 167.0], [31.0, 3231.3999999999996], [32.0, 7714.25], [33.0, 160.0], [34.0, 6700.624999999999], [35.0, 6381.4], [36.0, 5043.571428571429], [37.0, 6103.0], [38.0, 5836.125], [39.0, 1309.375], [41.0, 8426.75], [40.0, 163.0], [43.0, 10005.153846153848], [42.0, 163.0], [44.0, 5996.0], [45.0, 8665.666666666668], [46.0, 9276.833333333332], [47.0, 10401.333333333334], [48.0, 9249.0], [49.0, 5307.428571428572], [50.0, 5717.222222222223], [51.0, 159.83333333333331], [53.0, 9807.076923076922], [52.0, 161.0], [54.0, 4600.333333333334], [55.0, 160.5], [56.0, 14493.312500000002], [57.0, 161.22222222222223], [58.0, 3219.8], [59.0, 13531.555555555555], [61.0, 13576.9], [60.0, 163.66666666666666], [63.0, 8940.333333333334], [62.0, 169.0], [66.0, 11830.0], [67.0, 168.0], [65.0, 159.5], [64.0, 162.37500000000003], [70.0, 14940.249999999996], [71.0, 161.5], [69.0, 161.16666666666666], [68.0, 161.5], [73.0, 14871.777777777785], [74.0, 5660.714285714285], [75.0, 166.0], [76.0, 6940.666666666666], [77.0, 16744.928571428576], [79.0, 20154.85714285714], [78.0, 161.8], [80.0, 8384.42857142857], [82.0, 5298.2], [83.0, 19043.5], [85.0, 4428.0], [87.0, 20345.470588235294], [86.0, 160.5], [91.0, 24636.4], [90.0, 162.0], [89.0, 164.2], [88.0, 160.0], [94.0, 24508.18181818182], [95.0, 25453.11111111111], [93.0, 159.0], [92.0, 163.3846153846154], [99.0, 161.0], [98.0, 160.875], [97.0, 164.77777777777777], [100.0, 24006.51851851852], [103.0, 156.0], [102.0, 162.2222222222222], [101.0, 160.42857142857142], [104.0, 12347.285714285716], [105.0, 14173.352941176472], [107.0, 16528.7], [106.0, 157.33333333333334], [108.0, 30172.0], [109.0, 13245.095238095239], [111.0, 165.2857142857143], [110.0, 162.0], [112.0, 24714.272727272728], [113.0, 10199.666666666668], [115.0, 27490.5], [114.0, 249.0], [116.0, 12012.888888888889], [119.0, 11337.375], [118.0, 183.5], [117.0, 159.0], [120.0, 20256.199999999997], [122.0, 31562.5], [123.0, 10878.666666666666], [121.0, 166.66666666666666], [125.0, 21126.0], [126.0, 18808.413793103453], [127.0, 1535.363636363637], [124.0, 161.0], [128.0, 3931.625], [129.0, 24201.8], [130.0, 14471.095238095235], [131.0, 2185.1333333333328], [132.0, 10675.849999999999], [133.0, 30290.0], [134.0, 18195.6], [135.0, 24247.0], [136.0, 5183.0], [137.0, 15192.749999999996], [138.0, 24200.1], [139.0, 5193.166666666667], [140.0, 28517.333333333332], [141.0, 6177.066666666667], [142.0, 30216.666666666668], [143.0, 30304.0], [144.0, 3513.7777777777783], [145.0, 25597.53846153846], [146.0, 1935.7647058823527], [147.0, 12192.199999999999], [148.0, 13813.18181818182], [149.0, 18231.0], [150.0, 5188.666666666666], [151.0, 16782.148936170208], [152.0, 30249.5], [153.0, 3514.0], [154.0, 15237.500000000002], [155.0, 26447.4375], [156.0, 10184.333333333334], [157.0, 26873.222222222223], [158.0, 15344.75], [159.0, 24247.8], [160.0, 12875.461538461537], [161.0, 4808.615384615385], [162.0, 20202.0], [163.0, 25935.5], [164.0, 5174.666666666668], [165.0, 19725.4], [166.0, 22754.916666666664], [167.0, 15195.874999999998], [168.0, 15202.5], [169.0, 5630.090909090908], [170.0, 9184.274999999998], [171.0, 6175.099999999999], [172.0, 18210.6], [173.0, 10911.21428571429], [174.0, 18932.624999999996], [175.0, 12197.399999999998], [176.0, 22713.305555555555], [177.0, 11444.125], [178.0, 7106.000000000001], [179.0, 8368.0], [180.0, 28365.812500000004], [181.0, 30249.0], [182.0, 30233.714285714286], [183.0, 18933.375], [184.0, 15193.400000000003], [185.0, 20203.72222222222], [186.0, 22721.0], [187.0, 4086.217391304348], [188.0, 7393.388888888891], [189.0, 6608.7857142857165], [190.0, 23538.333333333332], [191.0, 12940.749999999998], [192.0, 11725.923076923074], [193.0, 22731.5], [194.0, 5802.375], [195.0, 26224.933333333334], [196.0, 7685.833333333336], [197.0, 24212.4], [198.0, 13033.07142857143], [199.0, 15205.500000000004], [200.0, 11446.5], [201.0, 25646.303030303035], [202.0, 12190.800000000001], [203.0, 12195.9], [204.0, 24213.4], [205.0, 26854.611111111113], [206.0, 11093.181818181816], [207.0, 15185.5], [208.0, 10714.649999999998], [209.0, 13813.545454545452], [210.0, 16997.680000000004], [211.0, 8763.642857142859], [212.0, 30234.75], [213.0, 18466.21739130435], [214.0, 30225.5], [215.0, 4475.142857142857], [216.0, 19916.628571428573], [217.0, 12182.199999999999], [218.0, 10182.166666666666], [219.0, 10178.583333333334], [220.0, 23532.27777777778], [221.0, 22727.5], [222.0, 11465.0625], [223.0, 21215.800000000003], [224.0, 15179.142857142857], [225.0, 6173.750000000002], [226.0, 25090.77142857143], [227.0, 15196.5], [228.0, 11730.923076923076], [229.0, 30231.2], [230.0, 23558.11111111111], [231.0, 24243.700000000004], [232.0, 14041.23076923077], [233.0, 6698.608695652176], [234.0, 12191.6], [235.0, 12351.567567567572], [236.0, 5534.392857142857], [237.0, 30229.0], [238.0, 18451.434782608692], [239.0, 11433.125000000002], [240.0, 20201.666666666668], [241.0, 29007.96], [242.0, 11851.055555555557], [243.0, 4716.515151515152], [244.0, 21632.428571428572], [245.0, 24247.600000000002], [246.0, 16363.692307692309], [247.0, 12194.533333333333], [248.0, 16182.733333333334], [249.0, 10577.423076923076], [250.0, 21644.85714285714], [251.0, 19279.13636363636], [252.0, 11433.875], [253.0, 12541.35294117647], [254.0, 18941.5], [255.0, 8756.571428571428], [257.0, 15192.416666666668], [256.0, 17489.23076923077], [258.0, 10780.147058823526], [259.0, 7106.884615384614], [260.0, 30213.529411764706], [261.0, 8014.826086956522], [262.0, 30227.0], [263.0, 19291.409090909092], [264.0, 9782.84], [270.0, 4134.622641509436], [271.0, 18953.333333333332], [268.0, 7679.875000000001], [269.0, 18195.899999999998], [265.0, 11729.384615384617], [266.0, 25768.7037037037], [267.0, 24206.800000000003], [273.0, 17343.500000000004], [272.0, 2853.9253731343288], [274.0, 30248.1], [275.0, 11239.15789473684], [276.0, 19293.545454545456], [277.0, 30228.4], [278.0, 19300.818181818184], [279.0, 26509.875], [280.0, 30220.285714285714], [286.0, 23278.923076923074], [287.0, 26454.874999999996], [284.0, 9725.18181818182], [285.0, 8362.018181818179], [281.0, 22723.0], [282.0, 5511.600000000001], [283.0, 8300.187499999998], [289.0, 12036.86046511628], [288.0, 19280.363636363636], [290.0, 9674.947368421053], [291.0, 30203.727272727272], [292.0, 20828.6875], [293.0, 27212.699999999997], [294.0, 10176.57142857143], [295.0, 10682.200000000003], [296.0, 6131.348837209303], [302.0, 30199.333333333332], [303.0, 11092.045454545452], [300.0, 11936.08695652174], [301.0, 5184.416666666665], [297.0, 10188.42857142857], [298.0, 30251.625], [299.0, 12880.076923076924], [305.0, 30194.714285714286], [304.0, 13528.555555555555], [306.0, 17697.527777777785], [307.0, 12181.300000000005], [308.0, 30190.307692307695], [309.0, 18194.133333333335], [310.0, 18931.9375], [311.0, 30194.937499999996], [312.0, 16066.41176470588], [318.0, 20821.8125], [319.0, 26865.0], [316.0, 19794.84615384615], [317.0, 12209.65], [313.0, 30194.166666666664], [314.0, 30371.249999999996], [315.0, 6486.578947368424], [323.0, 15326.627976190479], [320.0, 17318.999999999996], [321.0, 16539.545454545452], [322.0, 9059.962962962964], [324.0, 1023.1204819277111], [326.0, 175.39999999999998], [325.0, 178.2], [327.0, 175.44444444444446], [334.0, 172.66666666666666], [328.0, 163.15384615384616], [333.0, 169.21428571428572], [332.0, 169.07142857142856], [331.0, 166.25], [329.0, 167.57142857142858], [350.0, 164.90243902439025], [351.0, 166.58], [348.0, 167.96296296296296], [339.0, 168.90322580645162], [337.0, 171.68749999999997], [336.0, 170.1276595744681], [346.0, 169.86956521739128], [345.0, 161.53333333333333], [344.0, 165.0], [343.0, 165.4], [342.0, 173.52631578947367], [341.0, 182.06666666666666], [340.0, 172.0], [366.0, 165.0], [362.0, 1831.021739130435], [363.0, 37583.6875], [365.0, 41939.85714285714], [355.0, 169.35999999999999], [353.0, 166.06666666666666], [361.0, 166.35555555555555], [359.0, 165.33333333333331], [358.0, 165.1176470588235], [357.0, 168.0666666666667], [356.0, 169.54761904761904], [369.0, 19911.14285714286], [368.0, 39846.87073170734], [370.0, 2315.3571428571427], [371.0, 30241.0], [372.0, 1213.1379310344826], [373.0, 15198.0], [374.0, 2337.428571428572], [375.0, 30240.0], [376.0, 30224.0], [382.0, 2899.3636363636356], [383.0, 30307.0], [380.0, 30274.0], [381.0, 5181.5], [377.0, 2321.785714285714], [378.0, 30232.0], [379.0, 2052.8124999999995], [385.0, 2703.9166666666665], [384.0, 15206.5], [386.0, 10205.0], [387.0, 1481.4347826086957], [388.0, 25371.16216216216], [389.0, 2493.2307692307695], [390.0, 2033.5789473684217], [391.0, 10240.0], [392.0, 4494.428571428572], [398.0, 3033.9523809523816], [399.0, 30189.5], [396.0, 10229.500000000002], [397.0, 5639.818181818182], [393.0, 17016.51199999999], [394.0, 27015.2962962963], [395.0, 1559.8372093023256], [401.0, 1742.2631578947362], [400.0, 1073.045454545455], [402.0, 6860.444444444445], [403.0, 10197.166666666668], [404.0, 4189.733333333334], [405.0, 3933.1874999999995], [406.0, 1483.347826086956], [407.0, 1483.869565217391], [408.0, 2820.8695652173915], [414.0, 30376.0], [415.0, 11864.277777777777], [412.0, 1370.1200000000006], [413.0, 20424.565217391308], [409.0, 914.0370370370366], [410.0, 15189.25], [411.0, 5644.818181818182], [417.0, 8742.999999999998], [416.0, 2038.7916666666665], [418.0, 25926.129870129866], [419.0, 29344.490118577087], [420.0, 2976.0937500000014], [421.0, 3774.7599999999998], [422.0, 3405.3571428571436], [423.0, 2056.7083333333326], [424.0, 30199.333333333332], [430.0, 1720.5862068965523], [431.0, 13055.142857142859], [428.0, 3776.6399999999994], [429.0, 9180.6], [425.0, 2016.8367346938785], [426.0, 30189.333333333332], [427.0, 5178.7777777777765], [433.0, 1771.7857142857144], [432.0, 4104.869565217393], [434.0, 30191.0], [435.0, 2892.09090909091], [436.0, 4257.772727272727], [437.0, 30196.0], [438.0, 3025.8571428571427], [439.0, 160.0], [446.0, 356.43502824858774], [445.0, 186.48888888888888], [444.0, 185.64814814814812], [447.0, 167.7], [441.0, 161.22666666666666], [443.0, 168.33333333333337], [442.0, 175.33333333333331], [455.0, 4456.821428571429], [452.0, 39719.813114754106], [453.0, 22914.283783783765], [454.0, 12754.484375000007], [456.0, 30179.5], [462.0, 6841.944444444447], [463.0, 1875.0566037735832], [457.0, 4171.366666666668], [458.0, 4319.448275862069], [459.0, 30184.0], [460.0, 2676.958333333334], [451.0, 181.0], [450.0, 168.1034482758621], [449.0, 168.72093023255817], [448.0, 163.05555555555554], [461.0, 30186.25], [465.0, 681.0172413793099], [464.0, 364.94155844155836], [466.0, 599.887323943662], [467.0, 509.53763440860183], [468.0, 1099.1212121212125], [469.0, 499.3958333333337], [470.0, 1123.6874999999998], [471.0, 787.1584158415836], [472.0, 857.4545454545454], [478.0, 13488.514462809928], [479.0, 4245.847826086956], [476.0, 531.7195121951222], [477.0, 26474.743315508025], [473.0, 1832.9999999999998], [474.0, 338.4597701149427], [475.0, 424.3620689655172], [481.0, 3742.6428571428555], [480.0, 614.8333333333327], [482.0, 1843.3472222222215], [483.0, 1592.559055118111], [484.0, 5355.862068965517], [485.0, 3829.634146341462], [486.0, 1533.490909090908], [487.0, 3295.416666666668], [488.0, 770.1608040201005], [494.0, 346.2763532763535], [495.0, 931.1249999999995], [492.0, 2051.71875], [493.0, 471.30243902439], [489.0, 2477.038461538462], [490.0, 460.13942307692275], [491.0, 288.32163742690034], [496.0, 631.3908629441626], [497.0, 2248.4827586206898], [498.0, 411.21999999999963], [499.0, 327.3915343915344], [500.0, 11121.097109649801], [1.0, 167.5]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[412.6658095238107, 10096.99942857146]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 69.56666666666666, "minX": 1.61221428E12, "maxY": 347118.98333333334, "series": [{"data": [[1.6122144E12, 341345.01666666666], [1.61221476E12, 84172.55], [1.61221446E12, 70186.0], [1.61221482E12, 18055.7], [1.61221452E12, 7090.283333333334], [1.61221488E12, 18999.666666666668], [1.61221458E12, 9045.583333333334], [1.612215E12, 298052.7833333333], [1.61221428E12, 50426.666666666664], [1.61221494E12, 19900.1], [1.61221464E12, 11030.766666666666], [1.61221434E12, 347118.98333333334], [1.6122147E12, 10603.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6122144E12, 500.6666666666667], [1.61221476E12, 2206.866666666667], [1.61221446E12, 700.6], [1.61221482E12, 2523.633333333333], [1.61221452E12, 1006.9666666666667], [1.61221488E12, 2820.9], [1.61221458E12, 1304.2333333333333], [1.612215E12, 45369.566666666666], [1.61221428E12, 69.56666666666666], [1.61221494E12, 3010.8], [1.61221464E12, 1607.5666666666666], [1.61221434E12, 501.6333333333333], [1.6122147E12, 1560.3333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.612215E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2031.3407768937639, "minX": 1.61221428E12, "maxY": 40469.74232309742, "series": [{"data": [[1.6122144E12, 22334.870786516858], [1.61221476E12, 40469.74232309742], [1.61221446E12, 29993.596774193535], [1.61221482E12, 35101.7396937573], [1.61221452E12, 30228.45558739253], [1.61221488E12, 30201.17529039071], [1.61221458E12, 30224.418344519017], [1.612215E12, 2031.3407768937639], [1.61221428E12, 2810.9615384615386], [1.61221494E12, 30265.71614844535], [1.61221464E12, 30213.87385740404], [1.61221434E12, 10063.782122905033], [1.6122147E12, 16869.111954459186]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.612215E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2031.253326201777, "minX": 1.61221428E12, "maxY": 40405.526034712915, "series": [{"data": [[1.6122144E12, 21116.719101123595], [1.61221476E12, 40405.526034712915], [1.61221446E12, 29676.87903225807], [1.61221482E12, 35101.64428739693], [1.61221452E12, 30228.409742120344], [1.61221488E12, 30201.141499472018], [1.61221458E12, 30224.3736017897], [1.612215E12, 2031.253326201777], [1.61221428E12, 2730.1538461538466], [1.61221494E12, 30265.667001003003], [1.61221464E12, 30213.82815356489], [1.61221434E12, 9617.279329608935], [1.6122147E12, 16869.013282732456]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.612215E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4.239219094738243, "minX": 1.61221428E12, "maxY": 69.5, "series": [{"data": [[1.6122144E12, 45.21348314606739], [1.61221476E12, 67.671562082777], [1.61221446E12, 46.66532258064517], [1.61221482E12, 40.98115429917549], [1.61221452E12, 54.134670487106014], [1.61221488E12, 34.978880675818374], [1.61221458E12, 51.89261744966441], [1.612215E12, 4.239219094738243], [1.61221428E12, 69.5], [1.61221494E12, 68.54162487462393], [1.61221464E12, 48.54478976234001], [1.61221434E12, 30.6927374301676], [1.6122147E12, 36.18216318785582]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.612215E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1620.0, "minX": 1.61221428E12, "maxY": 49064.0, "series": [{"data": [[1.6122144E12, 31513.0], [1.61221428E12, 4290.0], [1.61221476E12, 49064.0], [1.61221446E12, 34880.0], [1.61221434E12, 17479.0], [1.61221482E12, 32425.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6122144E12, 28595.9], [1.61221428E12, 3694.4], [1.61221476E12, 48954.3], [1.61221446E12, 33361.5], [1.61221434E12, 14799.0], [1.61221482E12, 32425.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6122144E12, 31504.53], [1.61221428E12, 4290.0], [1.61221476E12, 49064.0], [1.61221446E12, 34880.0], [1.61221434E12, 16900.59999999999], [1.61221482E12, 32425.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6122144E12, 28682.55], [1.61221428E12, 4100.65], [1.61221476E12, 49002.8], [1.61221446E12, 34148.0], [1.61221434E12, 15810.0], [1.61221482E12, 32425.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6122144E12, 13646.0], [1.61221428E12, 1620.0], [1.61221476E12, 25900.0], [1.61221446E12, 25001.0], [1.61221434E12, 3656.0], [1.61221482E12, 32425.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6122144E12, 21068.5], [1.61221428E12, 2892.5], [1.61221476E12, 46717.5], [1.61221446E12, 28737.5], [1.61221434E12, 9649.0], [1.61221482E12, 32425.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61221482E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 162.0, "minX": 1.0, "maxY": 54199.0, "series": [{"data": [[2.0, 5603.0], [8.0, 15125.5], [9.0, 21188.0], [10.0, 15414.5], [3.0, 7223.5], [12.0, 22649.5], [1.0, 13078.0], [4.0, 7285.0], [16.0, 20152.0], [18.0, 26396.5], [5.0, 17203.0], [6.0, 12129.5], [24.0, 28587.0], [7.0, 8886.0], [28.0, 46692.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 30221.0], [547.0, 162.0], [3.0, 30204.0], [4.0, 30196.5], [5.0, 30200.0], [1525.0, 166.0], [6.0, 30220.5], [1537.0, 163.0], [7.0, 30223.5], [8.0, 30174.5], [2215.0, 165.0], [9.0, 30179.5], [10.0, 30229.5], [2721.0, 168.0], [11.0, 30176.0], [2919.0, 168.0], [2818.0, 167.0], [12.0, 30178.0], [13.0, 30183.0], [14.0, 30245.0], [15.0, 30185.5], [16.0, 30184.0], [17.0, 30180.5], [20.0, 30179.0], [21.0, 30226.0], [22.0, 30204.0], [24.0, 30192.5], [27.0, 30248.0], [28.0, 30170.0], [29.0, 30249.5], [31.0, 162.0], [32.0, 30174.5], [35.0, 30295.0], [46.0, 30216.0], [51.0, 30211.0], [59.0, 30239.0], [64.0, 52168.5], [71.0, 42221.0], [69.0, 30202.0], [74.0, 30190.5], [77.0, 1152.0], [79.0, 30145.0], [83.0, 30197.0], [87.0, 30162.0], [84.0, 30167.0], [96.0, 24254.5], [100.0, 30173.0], [135.0, 40185.0], [155.0, 30308.0], [194.0, 40287.5], [206.0, 30352.5], [231.0, 30179.0], [235.0, 30145.0], [244.0, 54199.0], [251.0, 30390.0], [248.0, 30262.5], [1.0, 30242.5], [258.0, 30170.5], [257.0, 30205.0], [323.0, 15159.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2919.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 161.0, "minX": 1.0, "maxY": 54199.0, "series": [{"data": [[2.0, 5377.5], [8.0, 14196.0], [9.0, 19431.5], [10.0, 14899.5], [3.0, 7061.5], [12.0, 21619.5], [1.0, 12031.0], [4.0, 7152.5], [16.0, 18462.0], [18.0, 24778.5], [5.0, 17041.0], [6.0, 11889.5], [24.0, 26951.0], [7.0, 8556.5], [28.0, 45816.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 30221.0], [547.0, 161.0], [3.0, 30204.0], [4.0, 30196.5], [5.0, 30200.0], [1525.0, 166.0], [6.0, 30220.5], [1537.0, 163.0], [7.0, 30223.5], [8.0, 30174.5], [2215.0, 165.0], [9.0, 30179.5], [10.0, 30229.5], [2721.0, 168.0], [11.0, 30176.0], [2919.0, 168.0], [2818.0, 167.0], [12.0, 30178.0], [13.0, 30182.0], [14.0, 30245.0], [15.0, 30185.5], [16.0, 30184.0], [17.0, 30180.5], [20.0, 30179.0], [21.0, 30226.0], [22.0, 30204.0], [24.0, 30192.5], [27.0, 30247.0], [28.0, 30170.0], [29.0, 30249.5], [31.0, 161.0], [32.0, 30174.5], [35.0, 30295.0], [46.0, 30216.0], [51.0, 30211.0], [59.0, 30238.0], [64.0, 52168.5], [71.0, 42221.0], [69.0, 30202.0], [74.0, 30190.5], [77.0, 1152.0], [79.0, 30145.0], [83.0, 30197.0], [87.0, 30162.0], [84.0, 30167.0], [96.0, 24254.5], [100.0, 30173.0], [135.0, 40185.0], [155.0, 30308.0], [194.0, 40287.5], [206.0, 30352.5], [231.0, 30178.0], [235.0, 30145.0], [244.0, 54199.0], [251.0, 30390.0], [248.0, 30262.5], [1.0, 30242.5], [258.0, 30170.5], [257.0, 30205.0], [323.0, 15159.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2919.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.61221428E12, "maxY": 240.95, "series": [{"data": [[1.6122144E12, 3.8], [1.61221476E12, 13.316666666666666], [1.61221446E12, 4.966666666666667], [1.61221482E12, 14.983333333333333], [1.61221452E12, 6.65], [1.61221488E12, 16.416666666666668], [1.61221458E12, 8.283333333333333], [1.612215E12, 240.95], [1.61221428E12, 0.6333333333333333], [1.61221494E12, 16.616666666666667], [1.61221464E12, 9.95], [1.61221434E12, 3.816666666666667], [1.6122147E12, 9.616666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.612215E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.61221428E12, "maxY": 249.28333333333333, "series": [{"data": [[1.6122144E12, 2.933333333333333], [1.61221428E12, 0.43333333333333335], [1.61221476E12, 0.6], [1.61221446E12, 0.5666666666666667], [1.61221434E12, 2.9833333333333334], [1.61221482E12, 0.016666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6122144E12, 0.016666666666666666], [1.61221488E12, 0.016666666666666666], [1.61221446E12, 0.38333333333333336], [1.61221464E12, 0.016666666666666666]], "isOverall": false, "label": "520", "isController": false}, {"data": [[1.6122144E12, 0.016666666666666666], [1.61221488E12, 15.766666666666667], [1.61221458E12, 7.45], [1.612215E12, 249.28333333333333], [1.61221476E12, 11.883333333333333], [1.61221446E12, 3.183333333333333], [1.61221494E12, 16.616666666666667], [1.61221464E12, 9.1], [1.61221482E12, 14.133333333333333], [1.61221452E12, 5.816666666666666], [1.6122147E12, 8.783333333333333]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.612215E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.61221428E12, "maxY": 249.28333333333333, "series": [{"data": [[1.6122144E12, 2.933333333333333], [1.61221428E12, 0.43333333333333335], [1.61221476E12, 0.6], [1.61221446E12, 0.5666666666666667], [1.61221434E12, 2.9833333333333334], [1.61221482E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6122144E12, 0.03333333333333333], [1.61221488E12, 15.783333333333333], [1.61221458E12, 7.45], [1.612215E12, 249.28333333333333], [1.61221476E12, 11.883333333333333], [1.61221446E12, 3.566666666666667], [1.61221494E12, 16.616666666666667], [1.61221464E12, 9.116666666666667], [1.61221482E12, 14.133333333333333], [1.61221452E12, 5.816666666666666], [1.6122147E12, 8.783333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.612215E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.61221428E12, "maxY": 249.28333333333333, "series": [{"data": [[1.6122144E12, 2.933333333333333], [1.61221428E12, 0.43333333333333335], [1.61221476E12, 0.6], [1.61221446E12, 0.5666666666666667], [1.61221434E12, 2.9833333333333334], [1.61221482E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6122144E12, 0.03333333333333333], [1.61221488E12, 15.783333333333333], [1.61221458E12, 7.45], [1.612215E12, 249.28333333333333], [1.61221476E12, 11.883333333333333], [1.61221446E12, 3.566666666666667], [1.61221494E12, 16.616666666666667], [1.61221464E12, 9.116666666666667], [1.61221482E12, 14.133333333333333], [1.61221452E12, 5.816666666666666], [1.6122147E12, 8.783333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.612215E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

